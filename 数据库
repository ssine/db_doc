用户
User(user_id, name, password, identity);
    
由于用户和角色有一一对应关系，用户为主表，在角色中创建外键
Role(role_id,nickname,hp,exp,atk,def,money,user_id,team_id);

仓库和角色为多对一，在仓库中创建外键
EquipRepository(rep_id, name, volume, role_id);
ItemRepository(rep_id, name, volume, role_id);

背包和角色为多对一，在背包中创建外键
Backpack(backpack_id, name, volume, role_id);

账单和角色为多对一，在账单中创建外键
Bill(bill_id, time, deposit, money, role_id);

一个角色至少在一个队伍里，一个队伍可以有多个人,在角色中创建外键
Team(team_id, leader);


Dungeons(dungeons_id, name);

副本和队伍是多对多关系，因此创建一张新表
Fights(team_id, dungeons_id, result);

Monster(monster_id,name);

怪物的等级是弱实体，需要怪物加上其等级才能作为一个实体，因此monster_id和level共同作为主键
MonsterLevel(monster_id, level, hp, atk, def, money, exp);

副本和怪物实体是多对多关系，因此创建一张新表
HaveMonster(dungeon_id,monster_id,max_num);

道具
Item(item_id, name, kind, hp, atk, def, price);

装备
Equipment(equip_id, name, hp, atk, price);

装备和仓库是多对多关系，因此创建一张新表
StoreEquipment(rep_id, eqiup_id, number);

道具和仓库是多对多关系，因此创建一张新表
StoreItem(rep_id, item_id, number);

背包和仓库是多对多关系，因此创建一张新表
BackpackItem(backpack_id, item_id, number);

装备和角色是多对多关系，因此创建一张新表
DressEquip(role_id, equip_id, number)

宠物
Pet(pet_id, kind, price);

宠物和角色是多对多关系，因此创建一张新表
AdoptPet(role_id, pet_id, number)

一个用户有多个购买清单表，在清单中创建外键
ShopList(shopping_id, time, total_price, role_id);

宠物和购买清单为多对多关系，创建一张新表
ShopPet(pet_id,shopping_id,number);

装备和购买清单为多对多关系，创建一张新表
ShopEquip(equip_id,shopping_id,number);

道具和购买清单为多对多关系，创建一张新表
ShopItem(item_id,shopping_id,number);

每个角色有若干朋友，为多对多关系，创建一张新表
Friend(role_id_1, role_id_2);
