Title: MMORPG设计文档

[TITLE]

[TOC]

# 项目介绍

## MMORPG

MMORPG，是英文Massive（或Massively）Multiplayer Online Role-PlayingGame的缩写。至今尚未有[MMORPG](https://baike.baidu.com/item/MMORPG)的正式中文译名，而在中国比较常见的译法则是"大型多人在线角色扮演游戏"，是网络游戏的一种。在所有角色扮演游戏中，玩家都要扮演一个虚构角色，并控制该角色的许多活动。

## 运行机制

MMORPG分为客户端和服务器两部分。我们使用浏览器作为客户端。玩家从客户端通过互联网连接，登陆服务器端后才能进行游戏。

玩家的资料保存在服务器端。游戏的过程，是玩家扮演的角色和其他玩家控制的角色在网络虚拟空间中实时互动。而非玩家扮演的角色（即NPC）则往往是在游戏中提供特殊服务的人物，如销售虚拟物品，提供任务等。

我们提供服务器供玩家游戏，负责管理游戏中的虚拟世界，并不断为游戏做出更新，以便留住玩家以及吸引其他人来玩这款游戏。

# 游戏需求

## 游戏流程

每一个**用户**创建自己的**角色**。系统内置了**怪物**，角色可以**组队**进入**副本**攻击**怪物**获得各种奖励。 角色还可以在地图上的**商店**购物，相互添加**好友**。**队伍**之间可以发起对战。

## 名词解释

角色
  ~ 角色是玩家进行游戏的载体，玩家操控角色在游戏中行动。
  ~ 角色拥有一系列属性，包括昵称、生命值(HP)、攻击力、防御力、经验值、金钱。

好友
  ~ 好友是两个角色之间的对等关系，互为好友的两个角色可以更快的找到对方。

仓库
  ~ 一个角色拥有多个仓库，仓库中可以存储角色的物品。 角色在攻打副本时不可以访问仓库。

背包
  ~ 一个角色有且只有一个背包，用于在攻打副本时携带所需物品。

装备
  ~ 装备分为剑、盾、铠甲三种，可以提升角色的部分属性值。角色不能装备一件以上的同种装备。

宠物
  ~ 角色可以饲养宠物(从商店购买)，宠物会跟随在玩家身后，但只有装饰作用。

队伍
  ~ 一支队伍由一个或更多玩家组成，并有一个队长。队伍可以攻打副本。

副本
  ~ 副本是一张地图。副本中有怪物，角色可以在副本中攻击怪物并得到奖励。

主世界
  ~ 主世界是一张地图。角色可以在主世界访问商店、仓库或进入副本。

地图
  ~ 地图是一个二维矩阵，每一格被分配了地形。角色可以在地图中移动并触发事件。

金币
  ~ 游戏中的虚拟货币。

## 游戏规则

### 用户与角色

用户登录后，可以选择创建角色，如果已有角色，可以销毁角色或使用该角色进入游戏。

角色有三个装备槽——剑、盾、铠甲。每个槽只能装备一件装备。

角色可以申请与其他角色结为好友，若对方同意，则将对方加入双方的好友列表。

### 主世界

所有在线玩家位于主地图或副本地图。 角色进入游戏后，出生于主地图随机位置。

角色可以通过商店购买/出售可交易物品，可交易物品包括所有装备、道具、宠物。

角色可以通过副本入口点进入对应的副本。

物品可以在仓库与背包之间转移。

用户可以通过界面内菜单进行人民币充值，1元=100金币。

### 副本

怪物在且仅在副本中出现。 角色尝试进入怪物所在格子时视为发动攻击，参照战斗规则。 如果怪兽在战斗中死亡，会在自己周围 3*3 的方格内掉落物品，包括装备与道具。

战斗规则：

1. 发起战斗的一方先进行攻击，令攻击方为A，防御方为B。
2. 每次攻击， A 对 B 的 HP 造成 A攻击 - B防御 点伤害。
3. 一次攻击结束后，攻击与防御方交换，进行下一轮攻击。
4. 有一方的 HP 小于等于 0 时，战斗结束。

角色可以在非战斗时刻使用道具，或是指定下一次战斗要使用的道具。


# 功能设计

下面是根据上文给出的需求分析得到的软件功能要求。

## 用户登陆、注册与创建角色

### 用户登录注册

登录注册页面前端部分内容，关注的重点还是用户账号和密码在js代码里要做对应正则的匹配，这是验证的第一步，保证用户输入格式的正确性同时也从一方面减少用户向后台发送没必要的错误请求。前端向后端请求的方式使用POST。 在后台接收前端传送的信息同样要经过验证正则的规则匹配步骤，因为有可能一些人并不是通过合法的方式进行访问，可以减少没必要的数据库查询。

### 用户密码安全性

密码要如何保存， 明文存入数据库？当然非常非常非常不推荐， 由于大多数客户的习惯都是使用相同的密码， 如果明文在发生信息泄露的情况下容易发生撞库的事情。所以在密码的保存上最好在后台使用“密钥 + 不可逆加密算” 如 sha1，sha256等有hash算法的不逆的加密算法进行加密后再存入数据库。

### 登录状态的保存

由于http协议是无状态的， 所以要记录用户的登录状态就要靠后台相应数据的维护来记录， 我们通常都是登录成功后在seesion中保存登录用户， 然后将用户登录通过cookie返回到客户端， 通过比对cookie和seesion信息来验证用户是否登录。

### 密码找回功能

因为后台密码是加密没法提供明文密码的找回， 所有可以设计通过手机短信验证或者邮箱验证， 验证成功后通过直接设置新密码的形式来进行， 对于重置密码的url地址为了安全起见要通过加入时间戳和唯一随机数来保证这个链接只在某个事件内有效， 如果在密码修改成功或者事件过期， 就把这个唯一随机数给删除， 保存密码方式同上。

### 角色的创建

一个用户只能创建一名角色，而且没有角色的用户无法进行游戏。 因此可以让用户在创建账号后立即进行角色的创建。 在前端让用户挑选自己喜欢的皮肤与特性等角色属性，将数据传给后端存入数据库。 角色创建后直接进入游戏。 一般不希望用户经常修改角色，因此将删除角色的功能放在进入游戏后的设置界面内。

## 角色交互

### 导航与事件触发

秉承简单的原则，基本只使用上下左右四个按钮。 玩家通过上下左右在地图上移动，如果玩家尝试进入某个特殊的格子（例如怪兽所在的格子、商店所在的格子），就触发事件。 可以触发的事件包括：

* 与怪兽战斗
* 打开商店界面
* 打开仓库界面
* 进入副本
* 拾取物品
* 离开副本

### 其他操作

出去导航时出发的时间，角色还能进行许多其他操作，通过前端 UI 引导，使用鼠标完成。 这些操作主要与其他玩家交互、道具与装备的使用与转移、在商店购买有关。 这些操作会在后面详细说明。

## 购买与充值

### 商店购物

游戏中的虚拟货币称为金币。 玩家通过导航进入商店后，会弹出商店菜单。 游戏设定为在商店中可以无限量购买或出售所有的物品，包括宠物、装备与道具。 因此不必存储商店中的库存余量。 前端需要按照分类展示所有的物品，玩家根据需要将要购买的物品加入购物清单，清单在加入第一个物品时自动生成。 清单显示在一个单独的窗口中，并实时计算当前所有物品的金币数。 在玩家选择完毕后，可以进行结算，从玩家余额中扣除相应的金币，并向玩家对应的仓库中添加所购买的物品，这是前端与后端进行数据传递的一步。

### 人民币充值

玩家获取金币有两种途径，一是攻打副本时怪物掉落以及副本奖励，一是通过人民币充值。 由于涉及到金钱交易，处理需要十分谨慎，在后端采用数据库事务模式。 与各种支付平台对接，使得用户可以通过多种方式支付。

## 物品与装备



### 界面设计


### 操作逻辑



## 副本与奖励

## 多人联机

# 数据库设计

## 实体-关系模型

## 数据库表结构

# 技术和环境分析

## 开发技术

### 前端

* HTML
* CSS
* JS (Vue.js)

### 后端

* Web服务器： uWSGI
* Web应用： Django 2.1.4

## 开发环境

Windows 10

## 生产环境

* 阿里云服务器 CentOS 7.4
* CPU ：1核 Xeon E5 
* 硬盘：40G SSD
* 内存：2G

